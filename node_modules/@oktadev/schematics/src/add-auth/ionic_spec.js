"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path = __importStar(require("path"));
const ionic_pkg_json_1 = __importDefault(require("./ionic-pkg.json"));
const collectionPath = path.join(__dirname, '../collection.json');
const defaultOptions = {
    issuer: 'https://dev-737523.okta.com/oauth2/default',
    clientId: '0oaifymbuodpH8nAi0h7'
};
const defaultAppModule = `import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { RouteReuseStrategy } from '@angular/router';

import { IonicModule, IonicRouteStrategy } from '@ionic/angular';
import { SplashScreen } from '@ionic-native/splash-screen/ngx';
import { StatusBar } from '@ionic-native/status-bar/ngx';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  entryComponents: [],
  imports: [BrowserModule, IonicModule, AppRoutingModule],
  providers: [
    StatusBar,
    SplashScreen,
    { provide: RouteReuseStrategy, useClass: IonicRouteStrategy }
  ],
  bootstrap: [AppComponent]
})
export class AppModule {}`;
const existingPlugins = {
    plugins: {
        "cordova-plugin-camera": {
            "CAMERA_USAGE_DESCRIPTION": "Need camera access to take pictures",
            "PHOTOLIBRARY_USAGE_DESCRIPTION": "Need photo library access to get pictures from there"
        }
    }
};
describe('OktaDev Schematics: Ionic/Angular', () => {
    it('requires required issuer option', () => __awaiter(void 0, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        const schematic = yield runner.runSchematicAsync('add-auth', {}, schematics_1.Tree.empty());
        yield expectAsync(schematic.toPromise()).toBeRejected();
    }));
    it('works with cordova', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        const pkg = Object.assign({}, ionic_pkg_json_1.default);
        pkg.cordova = Object.assign({}, existingPlugins);
        // Add package.json
        tree.create('/package.json', JSON.stringify(pkg));
        // Add app.module.ts
        tree.create('/src/app/app.module.ts', defaultAppModule);
        const cordovaOptions = Object.assign({}, defaultOptions);
        cordovaOptions.platform = 'cordova';
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        yield runner.runSchematicAsync('add-auth', cordovaOptions, tree).toPromise();
        expect(tree.files.length).toEqual(28);
        expect(tree.files.sort()[0]).toMatch('package.json');
        expect(tree.files.sort()).toEqual([
            '/package.json',
            '/src/app/app-routing.module.ts',
            '/src/app/app.component.spec.ts',
            '/src/app/app.component.ts',
            '/src/app/app.module.ts',
            '/src/app/auth/auth-callback/auth-callback.module.ts',
            '/src/app/auth/auth-callback/auth-callback.page.ts',
            '/src/app/auth/auth-guard.service.ts',
            '/src/app/auth/auth-http.service.ts',
            '/src/app/auth/auth.module.ts',
            '/src/app/auth/end-session/end-session.module.ts',
            '/src/app/auth/end-session/end-session.page.ts',
            '/src/app/auth/factories/auth.factory.ts',
            '/src/app/auth/factories/browser.factory.ts',
            '/src/app/auth/factories/http.factory.ts',
            '/src/app/auth/factories/index.ts',
            '/src/app/auth/factories/storage.factory.ts',
            '/src/app/auth/ng-http.service.ts',
            '/src/app/auth/user-info.model.ts',
            '/src/app/login/login.module.ts',
            '/src/app/login/login.page.html',
            '/src/app/login/login.page.scss',
            '/src/app/login/login.page.spec.ts',
            '/src/app/login/login.page.ts',
            '/src/app/tab1/tab1.page.html',
            '/src/app/tab1/tab1.page.spec.ts',
            '/src/app/tab1/tab1.page.ts',
            '/src/environments/environment.ts'
        ]);
        const appModule = tree.readContent('/src/app/app.module.ts');
        expect(appModule).toMatch(/AuthModule/);
        expect(appModule).toMatch(/HttpClientModule/);
        expect(appModule).toMatch(/SplashScreen/);
        expect(appModule).toMatch(/StatusBar/);
        const env = tree.readContent('/src/environments/environment.ts');
        expect(env).toContain(`client_id: '${defaultOptions.clientId}'`);
        expect(env).toContain(`server_host: '${defaultOptions.issuer}'`);
        const pkgJson = tree.readContent('/package.json');
        expect(pkgJson).toContain('"cordova":');
        expect(pkgJson).toContain('"PHOTOLIBRARY_USAGE_DESCRIPTION"');
    }));
    it('works with capacitor', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        tree.create('/package.json', JSON.stringify(ionic_pkg_json_1.default));
        tree.create('/src/app/app.module.ts', defaultAppModule);
        const capacitorOptions = Object.assign({}, defaultOptions);
        capacitorOptions.platform = 'capacitor';
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        yield runner.runSchematicAsync('add-auth', capacitorOptions, tree).toPromise();
        expect(tree.files.length).toEqual(29);
        expect(tree.files.sort()).toEqual([
            '/npm-shrinkwrap.json',
            '/package.json',
            '/src/app/app-routing.module.ts',
            '/src/app/app.component.spec.ts',
            '/src/app/app.component.ts',
            '/src/app/app.module.ts',
            '/src/app/auth/auth-callback/auth-callback.module.ts',
            '/src/app/auth/auth-callback/auth-callback.page.ts',
            '/src/app/auth/auth-guard.service.ts',
            '/src/app/auth/auth-http.service.ts',
            '/src/app/auth/auth.module.ts',
            '/src/app/auth/end-session/end-session.module.ts',
            '/src/app/auth/end-session/end-session.page.ts',
            '/src/app/auth/factories/auth.factory.ts',
            '/src/app/auth/factories/browser.factory.ts',
            '/src/app/auth/factories/http.factory.ts',
            '/src/app/auth/factories/index.ts',
            '/src/app/auth/factories/storage.factory.ts',
            '/src/app/auth/ng-http.service.ts',
            '/src/app/auth/user-info.model.ts',
            '/src/app/login/login.module.ts',
            '/src/app/login/login.page.html',
            '/src/app/login/login.page.scss',
            '/src/app/login/login.page.spec.ts',
            '/src/app/login/login.page.ts',
            '/src/app/tab1/tab1.page.html',
            '/src/app/tab1/tab1.page.spec.ts',
            '/src/app/tab1/tab1.page.ts',
            '/src/environments/environment.ts'
        ]);
        const appModule = tree.readContent('/src/app/app.module.ts');
        expect(appModule).toMatch(/AuthModule/);
        expect(appModule).toMatch(/HttpClientModule/);
        const env = tree.readContent('/src/environments/environment.ts');
        expect(env).toContain(`client_id: '${defaultOptions.clientId}'`);
        expect(env).toContain(`server_host: '${defaultOptions.issuer}'`);
        const pkgJson = tree.readContent('/package.json');
        expect(pkgJson).not.toContain('"cordova":');
    }));
    it('works with jhipster', () => __awaiter(void 0, void 0, void 0, function* () {
        const tree = new testing_1.UnitTestTree(new schematics_1.HostTree);
        tree.create('/package.json', JSON.stringify(ionic_pkg_json_1.default));
        tree.create('/src/app/app.module.ts', defaultAppModule);
        const jhipsterOptions = {
            configUri: 'auth-info',
            issuer: 'web_app',
            clientId: 'http://localhost:9080/auth/realms/jhipster',
        };
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        yield runner.runSchematicAsync('add-auth', jhipsterOptions, tree).toPromise();
        expect(tree.files.length).toEqual(30);
        expect(tree.files.sort()[0]).toMatch('npm-shrinkwrap.json');
        const authConfig = tree.readContent('src/app/auth/auth-config.service.ts');
        expect(authConfig).toContain('${environment.apiUrl}/auth-info');
        const env = tree.readContent('/src/environments/environment.ts');
        expect(env).toContain(`client_id: '${jhipsterOptions.clientId}'`);
        expect(env).toContain(`server_host: '${jhipsterOptions.issuer}'`);
    }));
});
//# sourceMappingURL=ionic_spec.js.map